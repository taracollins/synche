swagger: '2.0'

host: localhost:8080
basePath: /v1/api
schemes:
  - http

info:
  description: Synche Server API
  version: 1.0.0
  title: Synche
  # put the contact info for your development or API team
  contact:
    email: you@your-company.com

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

# tags are used for organizing operations
tags:
  - name: transfer
    description: File transfer requests

paths:
  /upload/new:
    post:
      tags:
        - transfer
      summary: requests to initiate a new file upload
      operationId: newUpload
      description: To upload a file to the server, a new upload request must be sent to this endpoint with the required information about the file
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: fileInfo
          schema:
            $ref: '#/definitions/FileInfo'
          required: true
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/NewFileUploadRequestAccepted'
        400:
          description: bad request
          schema:
            $ref: '#/definitions/Error'
        501:
          description: not implemented
          schema:
            $ref: '#/definitions/NotImplemented'

  /upload/chunk:
    post:
      tags:
        - transfer
      summary: adds an inventory item
      operationId: uploadChunk
      description: Uploads a new chunk to the Synche server
      consumes:
        - multipart/form-data
      produces:
        - application/json
      parameters:
        - in: formData
          name: chunkData
          type: file
          required: true
          description: Chunk file data
        - in: formData
          name: chunkHash
          type: string
          required: true
          description: The file hash of the chunk
        - in: formData
          name: chunkNumber
          type: integer
          required: true
          description: The position index of the chunk in the file the chunk is from
        - in: formData
          name: uploadRequestId
          type: string
          required: true
          description: The identifier for the composite file upload request
      responses:
        201:
          description: OK
          schema:
            $ref: '#/definitions/UploadedChunk'
        400:
          description: bad request
          schema:
            $ref: '#/definitions/Error'
        409:
          description: the file already exists or cannot be written to
          schema:
            $ref: '#/definitions/Error'
        501:
          description: not implemented
          schema:
            $ref: '#/definitions/NotImplemented'

  /list:
    get:
      tags:
        - transfer
      summary: lists the files on the server
      operationId: listFiles
      description: Queries the server for the files and their locations stored on the server
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: directory
          schema:
            $ref: '#/definitions/DirectoryListRequest'
          required: false
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/DirectoryContents'
        501:
          description: not implemented
          schema:
            $ref: '#/definitions/NotImplemented'

definitions:
  Message:
    type: object
    properties:
      success:
        type: boolean
      code:
        type: integer
      message:
        type: string

  FileInfo:
    type: object
    description: required information about a file to intiate a multipart upload
    required:
      - name
      - size
      - hash
      - chunks
    properties:
      name:
        type: string
        description: the original name of the file
      size:
        type: integer
        description: the size of the file in bits
      hash:
        type: string
        description: the hash of the entire file
      chunks:
        type: integer
        description: the number of chunks the server should expect

  NewFileUploadRequestAccepted:
    type: object
    description: accept the new file upload request and return a UUID for the file
    properties:
      uploadRequestId:
        type: string

  UploadedChunk:
    type: object
    properties:
      hash:
        type: string
        description: The file hash of the chunk
      directoryId:
        $ref: '#/definitions/DirectoryId'
      compositeFileId:
        type: string
        description: The id of the file this chunk is a part of

  DirectoryId:
    type: string
    example: d701748f0851
    description: the id of the directory to list

  DirectoryListRequest:
    type: object
    properties:
      directoryId:
        $ref: '#/definitions/DirectoryId'
      limit:
        type: integer
        example: 10
        default: 500
        description: the limit of file results to return

  DirectoryContents:
    type: object
    properties:
      directoryId:
        $ref: '#/definitions/DirectoryId'
      listings:
        type: array
        items:
          type: string
        example: [ 'file1', 'file2', 'directory1/' ]
        description: the contents of the directory

  Error:
    type: string

  NotImplemented:
    type: string