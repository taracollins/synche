// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Synche Server API",
    "title": "Synche",
    "contact": {
      "email": "you@your-company.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "host": "localhost:8080",
  "basePath": "/v1/api",
  "paths": {
    "/list": {
      "get": {
        "description": "Queries the server for the files and their locations stored on the server",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "transfer"
        ],
        "summary": "lists the files on the server",
        "operationId": "listFiles",
        "parameters": [
          {
            "name": "directory",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/DirectoryListRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DirectoryContents"
            }
          },
          "501": {
            "description": "not implemented",
            "schema": {
              "$ref": "#/definitions/NotImplemented"
            }
          }
        }
      }
    },
    "/upload/chunk": {
      "post": {
        "description": "Uploads a new chunk to the Synche server",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "transfer"
        ],
        "summary": "adds an inventory item",
        "operationId": "uploadChunk",
        "parameters": [
          {
            "type": "file",
            "description": "Chunk file data",
            "name": "chunkData",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "The file hash of the chunk",
            "name": "chunkHash",
            "in": "formData",
            "required": true
          },
          {
            "type": "integer",
            "description": "The position index of the chunk in the file the chunk is from",
            "name": "chunkNumber",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "The identifier for the composite file upload request",
            "name": "uploadRequestId",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UploadedChunk"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "the file already exists or cannot be written to",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "501": {
            "description": "not implemented",
            "schema": {
              "$ref": "#/definitions/NotImplemented"
            }
          }
        }
      }
    },
    "/upload/new": {
      "post": {
        "description": "To upload a file to the server, a new upload request must be sent to this endpoint with the required information about the file",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "transfer"
        ],
        "summary": "requests to initiate a new file upload",
        "operationId": "newUpload",
        "parameters": [
          {
            "name": "fileInfo",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FileInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NewFileUploadRequestAccepted"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "501": {
            "description": "not implemented",
            "schema": {
              "$ref": "#/definitions/NotImplemented"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "DirectoryContents": {
      "type": "object",
      "properties": {
        "directoryId": {
          "$ref": "#/definitions/DirectoryId"
        },
        "listings": {
          "description": "the contents of the directory",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "file1",
            "file2",
            "directory1/"
          ]
        }
      }
    },
    "DirectoryId": {
      "description": "the id of the directory to list",
      "type": "string",
      "example": "d701748f0851"
    },
    "DirectoryListRequest": {
      "type": "object",
      "properties": {
        "directoryId": {
          "$ref": "#/definitions/DirectoryId"
        },
        "limit": {
          "description": "the limit of file results to return",
          "type": "integer",
          "default": 500,
          "example": 10
        }
      }
    },
    "Error": {
      "type": "string"
    },
    "FileInfo": {
      "description": "required information about a file to intiate a multipart upload",
      "type": "object",
      "required": [
        "name",
        "size",
        "hash",
        "chunks"
      ],
      "properties": {
        "chunks": {
          "description": "the number of chunks the server should expect",
          "type": "integer"
        },
        "hash": {
          "description": "the hash of the entire file",
          "type": "string"
        },
        "name": {
          "description": "the original name of the file",
          "type": "string"
        },
        "size": {
          "description": "the size of the file in bits",
          "type": "integer"
        }
      }
    },
    "Message": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer"
        },
        "message": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      }
    },
    "NewFileUploadRequestAccepted": {
      "description": "accept the new file upload request and return a UUID for the file",
      "type": "object",
      "properties": {
        "uploadRequestId": {
          "type": "string"
        }
      }
    },
    "NotImplemented": {
      "type": "string"
    },
    "UploadedChunk": {
      "type": "object",
      "properties": {
        "compositeFileId": {
          "description": "The id of the file this chunk is a part of",
          "type": "string"
        },
        "directoryId": {
          "$ref": "#/definitions/DirectoryId"
        },
        "hash": {
          "description": "The file hash of the chunk",
          "type": "string"
        }
      }
    }
  },
  "tags": [
    {
      "description": "File transfer requests",
      "name": "transfer"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Synche Server API",
    "title": "Synche",
    "contact": {
      "email": "you@your-company.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "host": "localhost:8080",
  "basePath": "/v1/api",
  "paths": {
    "/list": {
      "get": {
        "description": "Queries the server for the files and their locations stored on the server",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "transfer"
        ],
        "summary": "lists the files on the server",
        "operationId": "listFiles",
        "parameters": [
          {
            "name": "directory",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/DirectoryListRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DirectoryContents"
            }
          },
          "501": {
            "description": "not implemented",
            "schema": {
              "$ref": "#/definitions/NotImplemented"
            }
          }
        }
      }
    },
    "/upload/chunk": {
      "post": {
        "description": "Uploads a new chunk to the Synche server",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "transfer"
        ],
        "summary": "adds an inventory item",
        "operationId": "uploadChunk",
        "parameters": [
          {
            "type": "file",
            "description": "Chunk file data",
            "name": "chunkData",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "The file hash of the chunk",
            "name": "chunkHash",
            "in": "formData",
            "required": true
          },
          {
            "type": "integer",
            "description": "The position index of the chunk in the file the chunk is from",
            "name": "chunkNumber",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "The identifier for the composite file upload request",
            "name": "uploadRequestId",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UploadedChunk"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "the file already exists or cannot be written to",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "501": {
            "description": "not implemented",
            "schema": {
              "$ref": "#/definitions/NotImplemented"
            }
          }
        }
      }
    },
    "/upload/new": {
      "post": {
        "description": "To upload a file to the server, a new upload request must be sent to this endpoint with the required information about the file",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "transfer"
        ],
        "summary": "requests to initiate a new file upload",
        "operationId": "newUpload",
        "parameters": [
          {
            "name": "fileInfo",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FileInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NewFileUploadRequestAccepted"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "501": {
            "description": "not implemented",
            "schema": {
              "$ref": "#/definitions/NotImplemented"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "DirectoryContents": {
      "type": "object",
      "properties": {
        "directoryId": {
          "$ref": "#/definitions/DirectoryId"
        },
        "listings": {
          "description": "the contents of the directory",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "file1",
            "file2",
            "directory1/"
          ]
        }
      }
    },
    "DirectoryId": {
      "description": "the id of the directory to list",
      "type": "string",
      "example": "d701748f0851"
    },
    "DirectoryListRequest": {
      "type": "object",
      "properties": {
        "directoryId": {
          "$ref": "#/definitions/DirectoryId"
        },
        "limit": {
          "description": "the limit of file results to return",
          "type": "integer",
          "default": 500,
          "example": 10
        }
      }
    },
    "Error": {
      "type": "string"
    },
    "FileInfo": {
      "description": "required information about a file to intiate a multipart upload",
      "type": "object",
      "required": [
        "name",
        "size",
        "hash",
        "chunks"
      ],
      "properties": {
        "chunks": {
          "description": "the number of chunks the server should expect",
          "type": "integer"
        },
        "hash": {
          "description": "the hash of the entire file",
          "type": "string"
        },
        "name": {
          "description": "the original name of the file",
          "type": "string"
        },
        "size": {
          "description": "the size of the file in bits",
          "type": "integer"
        }
      }
    },
    "NewFileUploadRequestAccepted": {
      "description": "accept the new file upload request and return a UUID for the file",
      "type": "object",
      "properties": {
        "uploadRequestId": {
          "type": "string"
        }
      }
    },
    "NotImplemented": {
      "type": "string"
    },
    "UploadedChunk": {
      "type": "object",
      "properties": {
        "compositeFileId": {
          "description": "The id of the file this chunk is a part of",
          "type": "string"
        },
        "directoryId": {
          "$ref": "#/definitions/DirectoryId"
        },
        "hash": {
          "description": "The file hash of the chunk",
          "type": "string"
        }
      }
    }
  },
  "tags": [
    {
      "description": "File transfer requests",
      "name": "transfer"
    }
  ]
}`))
}
