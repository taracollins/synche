// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Synche Server API",
    "title": "Synche",
    "contact": {
      "email": "you@your-company.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "host": "127.0.0.1:9449",
  "basePath": "/v1/api",
  "paths": {
    "/download/{fileID}": {
      "get": {
        "tags": [
          "transfer"
        ],
        "operationId": "downloadFile",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "File not found"
          }
        }
      },
      "parameters": [
        {
          "type": "integer",
          "name": "fileID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/files/{fileID}": {
      "get": {
        "tags": [
          "files"
        ],
        "operationId": "getFileInfo",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/File"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "File not found"
          }
        }
      },
      "delete": {
        "tags": [
          "files"
        ],
        "operationId": "deleteFile",
        "responses": {
          "201": {
            "description": "Deleted"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "File not found"
          }
        }
      },
      "parameters": [
        {
          "type": "integer",
          "name": "fileID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/list/{directoryID}": {
      "get": {
        "description": "Queries the server for the files and their locations stored on the server",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "files"
        ],
        "summary": "lists the files on the server",
        "operationId": "list",
        "parameters": [
          {
            "type": "integer",
            "name": "directoryID",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "default": 100,
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DirectoryContents"
            }
          },
          "501": {
            "description": "not implemented"
          }
        }
      }
    },
    "/login": {
      "post": {
        "security": [],
        "tags": [
          "users"
        ],
        "summary": "user login",
        "operationId": "login",
        "parameters": [
          {
            "type": "string",
            "name": "email",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "name": "password",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "logged in",
            "schema": {
              "$ref": "#/definitions/AccessAndRefreshToken"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/register": {
      "post": {
        "security": [],
        "tags": [
          "users"
        ],
        "summary": "register user",
        "operationId": "register",
        "parameters": [
          {
            "type": "string",
            "name": "email",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "name": "password",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "name": "name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "registered successfully",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/token/refresh": {
      "post": {
        "security": [
          {
            "RefreshToken": []
          }
        ],
        "tags": [
          "tokens"
        ],
        "operationId": "refreshToken",
        "responses": {
          "200": {
            "description": "token refreshed successfully",
            "schema": {
              "$ref": "#/definitions/AccessToken"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/upload/chunk": {
      "post": {
        "description": "Uploads a new chunk to the Synche server",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "transfer"
        ],
        "summary": "adds an inventory item",
        "operationId": "uploadChunk",
        "parameters": [
          {
            "type": "file",
            "description": "Chunk file data",
            "name": "chunkData",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "The file hash of the chunk",
            "name": "chunkHash",
            "in": "formData",
            "required": true
          },
          {
            "type": "integer",
            "description": "The position index of the chunk in the file the chunk is from",
            "name": "chunkNumber",
            "in": "formData",
            "required": true
          },
          {
            "type": "integer",
            "format": "uint",
            "description": "The identifier for the composite file upload request",
            "name": "uploadID",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FileChunk"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "the file already exists or cannot be written to",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "501": {
            "description": "not implemented"
          }
        }
      }
    },
    "/upload/new": {
      "post": {
        "description": "To upload a file to the server, a new upload request must be sent to this endpoint with the required information about the file",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "transfer"
        ],
        "summary": "requests to initiate a new file upload",
        "operationId": "newUpload",
        "parameters": [
          {
            "name": "uploadInfo",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewFileUpload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Upload"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "501": {
            "description": "not implemented"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user": {
      "get": {
        "tags": [
          "users"
        ],
        "operationId": "profile",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AccessAndRefreshToken": {
      "type": "object",
      "properties": {
        "accessToken": {
          "type": "string"
        },
        "accessTokenExpiry": {
          "description": "the unix timestamp expiry of the access token",
          "type": "integer",
          "format": "int64"
        },
        "refreshToken": {
          "type": "string"
        }
      }
    },
    "AccessToken": {
      "type": "object",
      "properties": {
        "accessToken": {
          "type": "string"
        }
      }
    },
    "Chunk": {
      "type": "object",
      "properties": {
        "Hash": {
          "type": "string"
        },
        "ID": {
          "type": "integer",
          "format": "uint"
        },
        "Size": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Directory": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "uint"
        },
        "Path": {
          "type": "string"
        }
      }
    },
    "DirectoryContents": {
      "type": "object",
      "properties": {
        "Contents": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/File"
          }
        },
        "Directory": {
          "type": "object",
          "$ref": "#/definitions/Directory"
        }
      }
    },
    "Error": {
      "type": "string"
    },
    "File": {
      "type": "object",
      "required": [
        "ID",
        "Name",
        "Size",
        "Hash",
        "DirectoryID"
      ],
      "properties": {
        "DirectoryID": {
          "type": "integer",
          "format": "uint"
        },
        "Hash": {
          "type": "string"
        },
        "ID": {
          "type": "integer",
          "format": "uint"
        },
        "Name": {
          "type": "string"
        },
        "Size": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "FileChunk": {
      "type": "object",
      "properties": {
        "Chunk": {
          "type": "object",
          "$ref": "#/definitions/Chunk"
        },
        "DirectoryID": {
          "type": "integer",
          "format": "uint"
        },
        "FileID": {
          "type": "integer",
          "format": "uint"
        },
        "ID": {
          "type": "integer",
          "format": "uint"
        },
        "Number": {
          "description": "the position of the chunk in the file",
          "type": "integer"
        },
        "UploadID": {
          "type": "integer",
          "format": "uint"
        }
      }
    },
    "NewFileUpload": {
      "description": "required information about a file to intiate a multipart upload",
      "type": "object",
      "required": [
        "FileName",
        "FileSize",
        "FileHash",
        "NumChunks"
      ],
      "properties": {
        "FileHash": {
          "description": "the hash of the entire file",
          "type": "string"
        },
        "FileName": {
          "description": "the original name of the file",
          "type": "string"
        },
        "FileSize": {
          "description": "the size of the file in bits",
          "type": "integer"
        },
        "NumChunks": {
          "description": "the number of chunks the server should expect",
          "type": "integer"
        }
      }
    },
    "Upload": {
      "type": "object",
      "properties": {
        "DirectoryID": {
          "type": "integer",
          "format": "uint"
        },
        "FileID": {
          "type": "integer",
          "format": "uint"
        },
        "ID": {
          "type": "integer",
          "format": "uint"
        },
        "NumChunks": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "User": {
      "type": "object",
      "required": [
        "id",
        "email",
        "password",
        "name",
        "picture",
        "role"
      ],
      "properties": {
        "email": {
          "type": "string"
        },
        "emailVerified": {
          "type": "boolean"
        },
        "id": {
          "type": "integer",
          "format": "uint"
        },
        "name": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "picture": {
          "type": "string"
        },
        "role": {
          "type": "string",
          "enum": [
            "member",
            "admin"
          ]
        }
      }
    }
  },
  "securityDefinitions": {
    "AccessToken": {
      "type": "apiKey",
      "name": "X-Token",
      "in": "header"
    },
    "RefreshToken": {
      "type": "apiKey",
      "name": "X-Refresh-Token",
      "in": "header"
    }
  },
  "security": [
    {
      "AccessToken": []
    }
  ],
  "tags": [
    {
      "name": "files"
    },
    {
      "description": "File transfer requests",
      "name": "transfer"
    },
    {
      "description": "User authorization",
      "name": "users"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Synche Server API",
    "title": "Synche",
    "contact": {
      "email": "you@your-company.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "host": "127.0.0.1:9449",
  "basePath": "/v1/api",
  "paths": {
    "/download/{fileID}": {
      "get": {
        "tags": [
          "transfer"
        ],
        "operationId": "downloadFile",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "File not found"
          }
        }
      },
      "parameters": [
        {
          "type": "integer",
          "name": "fileID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/files/{fileID}": {
      "get": {
        "tags": [
          "files"
        ],
        "operationId": "getFileInfo",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/File"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "File not found"
          }
        }
      },
      "delete": {
        "tags": [
          "files"
        ],
        "operationId": "deleteFile",
        "responses": {
          "201": {
            "description": "Deleted"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "File not found"
          }
        }
      },
      "parameters": [
        {
          "type": "integer",
          "name": "fileID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/list/{directoryID}": {
      "get": {
        "description": "Queries the server for the files and their locations stored on the server",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "files"
        ],
        "summary": "lists the files on the server",
        "operationId": "list",
        "parameters": [
          {
            "type": "integer",
            "name": "directoryID",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "default": 100,
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DirectoryContents"
            }
          },
          "501": {
            "description": "not implemented"
          }
        }
      }
    },
    "/login": {
      "post": {
        "security": [],
        "tags": [
          "users"
        ],
        "summary": "user login",
        "operationId": "login",
        "parameters": [
          {
            "type": "string",
            "name": "email",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "name": "password",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "logged in",
            "schema": {
              "$ref": "#/definitions/AccessAndRefreshToken"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/register": {
      "post": {
        "security": [],
        "tags": [
          "users"
        ],
        "summary": "register user",
        "operationId": "register",
        "parameters": [
          {
            "type": "string",
            "name": "email",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "name": "password",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "name": "name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "registered successfully",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/token/refresh": {
      "post": {
        "security": [
          {
            "RefreshToken": []
          }
        ],
        "tags": [
          "tokens"
        ],
        "operationId": "refreshToken",
        "responses": {
          "200": {
            "description": "token refreshed successfully",
            "schema": {
              "$ref": "#/definitions/AccessToken"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/upload/chunk": {
      "post": {
        "description": "Uploads a new chunk to the Synche server",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "transfer"
        ],
        "summary": "adds an inventory item",
        "operationId": "uploadChunk",
        "parameters": [
          {
            "type": "file",
            "description": "Chunk file data",
            "name": "chunkData",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "The file hash of the chunk",
            "name": "chunkHash",
            "in": "formData",
            "required": true
          },
          {
            "type": "integer",
            "description": "The position index of the chunk in the file the chunk is from",
            "name": "chunkNumber",
            "in": "formData",
            "required": true
          },
          {
            "type": "integer",
            "format": "uint",
            "description": "The identifier for the composite file upload request",
            "name": "uploadID",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FileChunk"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "the file already exists or cannot be written to",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "501": {
            "description": "not implemented"
          }
        }
      }
    },
    "/upload/new": {
      "post": {
        "description": "To upload a file to the server, a new upload request must be sent to this endpoint with the required information about the file",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "transfer"
        ],
        "summary": "requests to initiate a new file upload",
        "operationId": "newUpload",
        "parameters": [
          {
            "name": "uploadInfo",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewFileUpload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Upload"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "501": {
            "description": "not implemented"
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user": {
      "get": {
        "tags": [
          "users"
        ],
        "operationId": "profile",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AccessAndRefreshToken": {
      "type": "object",
      "properties": {
        "accessToken": {
          "type": "string"
        },
        "accessTokenExpiry": {
          "description": "the unix timestamp expiry of the access token",
          "type": "integer",
          "format": "int64"
        },
        "refreshToken": {
          "type": "string"
        }
      }
    },
    "AccessToken": {
      "type": "object",
      "properties": {
        "accessToken": {
          "type": "string"
        }
      }
    },
    "Chunk": {
      "type": "object",
      "properties": {
        "Hash": {
          "type": "string"
        },
        "ID": {
          "type": "integer",
          "format": "uint"
        },
        "Size": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Directory": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "uint"
        },
        "Path": {
          "type": "string"
        }
      }
    },
    "DirectoryContents": {
      "type": "object",
      "properties": {
        "Contents": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/File"
          }
        },
        "Directory": {
          "type": "object",
          "$ref": "#/definitions/Directory"
        }
      }
    },
    "Error": {
      "type": "string"
    },
    "File": {
      "type": "object",
      "required": [
        "ID",
        "Name",
        "Size",
        "Hash",
        "DirectoryID"
      ],
      "properties": {
        "DirectoryID": {
          "type": "integer",
          "format": "uint"
        },
        "Hash": {
          "type": "string"
        },
        "ID": {
          "type": "integer",
          "format": "uint"
        },
        "Name": {
          "type": "string"
        },
        "Size": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "FileChunk": {
      "type": "object",
      "properties": {
        "Chunk": {
          "type": "object",
          "$ref": "#/definitions/Chunk"
        },
        "DirectoryID": {
          "type": "integer",
          "format": "uint"
        },
        "FileID": {
          "type": "integer",
          "format": "uint"
        },
        "ID": {
          "type": "integer",
          "format": "uint"
        },
        "Number": {
          "description": "the position of the chunk in the file",
          "type": "integer"
        },
        "UploadID": {
          "type": "integer",
          "format": "uint"
        }
      }
    },
    "NewFileUpload": {
      "description": "required information about a file to intiate a multipart upload",
      "type": "object",
      "required": [
        "FileName",
        "FileSize",
        "FileHash",
        "NumChunks"
      ],
      "properties": {
        "FileHash": {
          "description": "the hash of the entire file",
          "type": "string"
        },
        "FileName": {
          "description": "the original name of the file",
          "type": "string"
        },
        "FileSize": {
          "description": "the size of the file in bits",
          "type": "integer"
        },
        "NumChunks": {
          "description": "the number of chunks the server should expect",
          "type": "integer"
        }
      }
    },
    "Upload": {
      "type": "object",
      "properties": {
        "DirectoryID": {
          "type": "integer",
          "format": "uint"
        },
        "FileID": {
          "type": "integer",
          "format": "uint"
        },
        "ID": {
          "type": "integer",
          "format": "uint"
        },
        "NumChunks": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "User": {
      "type": "object",
      "required": [
        "id",
        "email",
        "password",
        "name",
        "picture",
        "role"
      ],
      "properties": {
        "email": {
          "type": "string"
        },
        "emailVerified": {
          "type": "boolean"
        },
        "id": {
          "type": "integer",
          "format": "uint"
        },
        "name": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "picture": {
          "type": "string"
        },
        "role": {
          "type": "string",
          "enum": [
            "member",
            "admin"
          ]
        }
      }
    }
  },
  "securityDefinitions": {
    "AccessToken": {
      "type": "apiKey",
      "name": "X-Token",
      "in": "header"
    },
    "RefreshToken": {
      "type": "apiKey",
      "name": "X-Refresh-Token",
      "in": "header"
    }
  },
  "security": [
    {
      "AccessToken": []
    }
  ],
  "tags": [
    {
      "name": "files"
    },
    {
      "description": "File transfer requests",
      "name": "transfer"
    },
    {
      "description": "User authorization",
      "name": "users"
    }
  ]
}`))
}
