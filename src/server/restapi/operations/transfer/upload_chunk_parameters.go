// Code generated by go-swagger; DO NOT EDIT.

package transfer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"mime/multipart"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UploadChunkMaxParseMemory sets the maximum size in bytes for
// the multipart form parser for this operation.
//
// The default value is 32 MB.
// The multipart parser stores up to this + 10MB.
var UploadChunkMaxParseMemory int64 = 32 << 20

// NewUploadChunkParams creates a new UploadChunkParams object
//
// There are no default values defined in the spec.
func NewUploadChunkParams() UploadChunkParams {

	return UploadChunkParams{}
}

// UploadChunkParams contains all the bound params for the upload chunk operation
// typically these are obtained from a http.Request
//
// swagger:parameters uploadChunk
type UploadChunkParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Chunk file data
	  Required: true
	  In: formData
	*/
	ChunkData io.ReadCloser
	/*The file hash of the chunk
	  Required: true
	  In: formData
	*/
	ChunkHash string
	/*The position index of the chunk in the file the chunk is from
	  Required: true
	  In: formData
	*/
	ChunkNumber int64
	/*The identifier for the composite file upload request
	  Required: true
	  In: formData
	*/
	UploadRequestID string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewUploadChunkParams() beforehand.
func (o *UploadChunkParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if err := r.ParseMultipartForm(UploadChunkMaxParseMemory); err != nil {
		if err != http.ErrNotMultipart {
			return errors.New(400, "%v", err)
		} else if err := r.ParseForm(); err != nil {
			return errors.New(400, "%v", err)
		}
	}
	fds := runtime.Values(r.Form)

	chunkData, chunkDataHeader, err := r.FormFile("chunkData")
	if err != nil {
		res = append(res, errors.New(400, "reading file %q failed: %v", "chunkData", err))
	} else if err := o.bindChunkData(chunkData, chunkDataHeader); err != nil {
		// Required: true
		res = append(res, err)
	} else {
		o.ChunkData = &runtime.File{Data: chunkData, Header: chunkDataHeader}
	}

	fdChunkHash, fdhkChunkHash, _ := fds.GetOK("chunkHash")
	if err := o.bindChunkHash(fdChunkHash, fdhkChunkHash, route.Formats); err != nil {
		res = append(res, err)
	}

	fdChunkNumber, fdhkChunkNumber, _ := fds.GetOK("chunkNumber")
	if err := o.bindChunkNumber(fdChunkNumber, fdhkChunkNumber, route.Formats); err != nil {
		res = append(res, err)
	}

	fdUploadRequestID, fdhkUploadRequestID, _ := fds.GetOK("uploadRequestId")
	if err := o.bindUploadRequestID(fdUploadRequestID, fdhkUploadRequestID, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindChunkData binds file parameter ChunkData.
//
// The only supported validations on files are MinLength and MaxLength
func (o *UploadChunkParams) bindChunkData(file multipart.File, header *multipart.FileHeader) error {
	return nil
}

// bindChunkHash binds and validates parameter ChunkHash from formData.
func (o *UploadChunkParams) bindChunkHash(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("chunkHash", "formData", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("chunkHash", "formData", raw); err != nil {
		return err
	}
	o.ChunkHash = raw

	return nil
}

// bindChunkNumber binds and validates parameter ChunkNumber from formData.
func (o *UploadChunkParams) bindChunkNumber(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("chunkNumber", "formData", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("chunkNumber", "formData", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("chunkNumber", "formData", "int64", raw)
	}
	o.ChunkNumber = value

	return nil
}

// bindUploadRequestID binds and validates parameter UploadRequestID from formData.
func (o *UploadChunkParams) bindUploadRequestID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("uploadRequestId", "formData", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("uploadRequestId", "formData", raw); err != nil {
		return err
	}
	o.UploadRequestID = raw

	return nil
}
