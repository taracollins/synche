// Code generated by go-swagger; DO NOT EDIT.

package files

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// NewUploadHandlerFunc turns a function with the right signature into a new upload handler
type NewUploadHandlerFunc func(NewUploadParams) middleware.Responder

// Handle executing the request and returning a response
func (fn NewUploadHandlerFunc) Handle(params NewUploadParams) middleware.Responder {
	return fn(params)
}

// NewUploadHandler interface for that can handle valid new upload params
type NewUploadHandler interface {
	Handle(NewUploadParams) middleware.Responder
}

// NewNewUpload creates a new http.Handler for the new upload operation
func NewNewUpload(ctx *middleware.Context, handler NewUploadHandler) *NewUpload {
	return &NewUpload{Context: ctx, Handler: handler}
}

/* NewUpload swagger:route POST /upload/new files newUpload

requests to initiate a new file upload

To upload a file to the server, a new upload request must be sent to this endpoint with the required information about the file

*/
type NewUpload struct {
	Context *middleware.Context
	Handler NewUploadHandler
}

func (o *NewUpload) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewNewUploadParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
