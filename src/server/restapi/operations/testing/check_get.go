// Code generated by go-swagger; DO NOT EDIT.

package testing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CheckGetHandlerFunc turns a function with the right signature into a check get handler
type CheckGetHandlerFunc func(CheckGetParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CheckGetHandlerFunc) Handle(params CheckGetParams) middleware.Responder {
	return fn(params)
}

// CheckGetHandler interface for that can handle valid check get params
type CheckGetHandler interface {
	Handle(CheckGetParams) middleware.Responder
}

// NewCheckGet creates a new http.Handler for the check get operation
func NewCheckGet(ctx *middleware.Context, handler CheckGetHandler) *CheckGet {
	return &CheckGet{Context: ctx, Handler: handler}
}

/* CheckGet swagger:route GET /check testing checkGet

CheckGet check get API

*/
type CheckGet struct {
	Context *middleware.Context
	Handler CheckGetHandler
}

func (o *CheckGet) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCheckGetParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
