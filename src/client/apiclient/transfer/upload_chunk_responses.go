// Code generated by go-swagger; DO NOT EDIT.

package transfer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"gitlab.computing.dcu.ie/collint9/2021-ca400-collint9-coynemt2/src/client/models"
)

// UploadChunkReader is a Reader for the UploadChunk structure.
type UploadChunkReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UploadChunkReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewUploadChunkCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUploadChunkBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUploadChunkConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 501:
		result := NewUploadChunkNotImplemented()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUploadChunkCreated creates a UploadChunkCreated with default headers values
func NewUploadChunkCreated() *UploadChunkCreated {
	return &UploadChunkCreated{}
}

/* UploadChunkCreated describes a response with status code 201, with default header values.

OK
*/
type UploadChunkCreated struct {
	Payload *models.UploadedChunk
}

func (o *UploadChunkCreated) Error() string {
	return fmt.Sprintf("[POST /upload/chunk][%d] uploadChunkCreated  %+v", 201, o.Payload)
}
func (o *UploadChunkCreated) GetPayload() *models.UploadedChunk {
	return o.Payload
}

func (o *UploadChunkCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UploadedChunk)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadChunkBadRequest creates a UploadChunkBadRequest with default headers values
func NewUploadChunkBadRequest() *UploadChunkBadRequest {
	return &UploadChunkBadRequest{}
}

/* UploadChunkBadRequest describes a response with status code 400, with default header values.

bad request
*/
type UploadChunkBadRequest struct {
	Payload models.Error
}

func (o *UploadChunkBadRequest) Error() string {
	return fmt.Sprintf("[POST /upload/chunk][%d] uploadChunkBadRequest  %+v", 400, o.Payload)
}
func (o *UploadChunkBadRequest) GetPayload() models.Error {
	return o.Payload
}

func (o *UploadChunkBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadChunkConflict creates a UploadChunkConflict with default headers values
func NewUploadChunkConflict() *UploadChunkConflict {
	return &UploadChunkConflict{}
}

/* UploadChunkConflict describes a response with status code 409, with default header values.

the file already exists or cannot be written to
*/
type UploadChunkConflict struct {
	Payload models.Error
}

func (o *UploadChunkConflict) Error() string {
	return fmt.Sprintf("[POST /upload/chunk][%d] uploadChunkConflict  %+v", 409, o.Payload)
}
func (o *UploadChunkConflict) GetPayload() models.Error {
	return o.Payload
}

func (o *UploadChunkConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadChunkNotImplemented creates a UploadChunkNotImplemented with default headers values
func NewUploadChunkNotImplemented() *UploadChunkNotImplemented {
	return &UploadChunkNotImplemented{}
}

/* UploadChunkNotImplemented describes a response with status code 501, with default header values.

not implemented
*/
type UploadChunkNotImplemented struct {
	Payload models.NotImplemented
}

func (o *UploadChunkNotImplemented) Error() string {
	return fmt.Sprintf("[POST /upload/chunk][%d] uploadChunkNotImplemented  %+v", 501, o.Payload)
}
func (o *UploadChunkNotImplemented) GetPayload() models.NotImplemented {
	return o.Payload
}

func (o *UploadChunkNotImplemented) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
